<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博の客</title>
  <subtitle>一个小小IT男的前端博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-30T13:10:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>博</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端mock数据（一）</title>
    <link href="http://yoursite.com/2017/04/29/mock/"/>
    <id>http://yoursite.com/2017/04/29/mock/</id>
    <published>2017-04-28T16:15:42.000Z</published>
    <updated>2017-04-30T13:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是mock数据"><a href="#什么是mock数据" class="headerlink" title="什么是mock数据"></a>什么是mock数据</h2><p>作为一名前端开发工程师，我们经常会遇到这样的问题，端已经页面写好了，后端的接口还不能给。有时为了让页面‘正常显示’，前端开发人员就会造一堆的静态假数据，等接口写好，再调接口，删静态数据。于是就想能不能自己模拟数据。简而言之，mock数据就是根据后端接口字段，生成前端需要的模拟数据以便前端独立开发。</p>
<h2 id="Json-Server"><a href="#Json-Server" class="headerlink" title="Json Server"></a>Json Server</h2><p>不多说了，直接上硬菜。今天我想介绍的一款基于node服务器运行的一个plugins:<a href="https://github.com/typicode/json-server" target="_blank" rel="external">JSON Server</a>,官网的介绍也很暴力：</p>
<pre><code>Get a full fake REST API with zero coding in less than 30 seconds (seriously)
</code></pre><p>30s内零代码即可得到一个完整的模拟 REST API。是不是看到这个就心动了呢。接下里就让我们来看下怎么让这款插件运行起来。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在你的代码库里安装依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install  json-server --save</div></pre></td></tr></table></figure></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建一个json文件。例如 mock.json<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"userinfo"</span>: [</div><div class="line">    &#123; <span class="string">"id"</span>: 1, <span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="string">"18"</span> &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 2, <span class="string">"name"</span>: <span class="string">"李四"</span>, <span class="string">"age"</span>: <span class="string">"19"</span> &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 3, <span class="string">"name"</span>: <span class="string">"王五"</span>, <span class="string">"age"</span>: <span class="string">"120"</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ json-server --watch mock.json</div></pre></td></tr></table></figure>
<p>打开浏览器输入地址：<a href="http://localhost:3000/userinfo/1" target="_blank" rel="external">http://localhost:3000/userinfo/1</a>,你可以看到如下数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"id"</span>: 1, <span class="string">"name"</span>: <span class="string">"张三"</span>, <span class="string">"age"</span>: <span class="string">"18"</span> &#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://localhost:3000/userinfo/1" target="_blank" rel="external">http://localhost:3000/userinfo/1</a> 地址里面的userinfo很好理解，代表的就是json文件里面的userinfo键，1表示的是id为1的数据。<br>需要注意的是json-server里面的id是不可变的。用来标识每一条数据，这就好比该json文件时一个数据库，根属性名对应一张张的表，id是表里面的primary key。因此，如果如果你用put方法推入一条带有id的数据，是会被忽略的。<br>另外，需要注意的是，使用post和put方法，需要做一个特殊的处理，后面会讲到。<br><a id="more"></a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>使用json-server作为后端接口，同样，先起服务：<code>json-server --watch mock.json</code>。在你的代码中发起ajax请求，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'http://localhost:3000/userinfo'</span>).then(<span class="keyword">function</span>(res)&#123;</div><div class="line">    <span class="built_in">return</span> res.json()</div><div class="line">&#125;).then(<span class="keyword">function</span>(res)&#123;</div><div class="line">    console.log(res)  //拿到后端的数据，在这里书写你的逻辑</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>你可以看到如下效果：<br><img src="/images/mock/mock1.png" alt="1"><br>是不是感觉和后端接口几乎一样。相信看到这里你已经心动了，接下来就让我们一起学习如何在接口处加上参数。</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>就跟我们平时使用参数一样，你可以通过类似于<code>http://localhost:3000/userinfo?id=2</code>这种get方式完成参数请求。得到如下结果<br><img src="/images/mock/mock2.png" alt="2"><br>同样你也可以用<code>name=张三 age=18</code>来筛选数据，显然这些和我们平时用后端接口没差别。<br>与此同时，jsson-server也为我们提供了一些自带的<strong>关键字</strong>参数</p>
<p>1.分页<br>关键字：<code>_page</code><br>在这里我们在加几条数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"userinfo"</span>: [</div><div class="line">    &#123; <span class="string">"id"</span>: 1, <span class="string">"name"</span>: <span class="string">"李四1"</span>, <span class="string">"age"</span>: 1 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 2, <span class="string">"name"</span>: <span class="string">"李四2"</span>, <span class="string">"age"</span>: 2 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 3, <span class="string">"name"</span>: <span class="string">"李四3"</span>, <span class="string">"age"</span>: 3 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 4, <span class="string">"name"</span>: <span class="string">"李四4"</span>, <span class="string">"age"</span>: 4 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 5, <span class="string">"name"</span>: <span class="string">"李四5"</span>, <span class="string">"age"</span>: 5 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 6, <span class="string">"name"</span>: <span class="string">"李四6"</span>, <span class="string">"age"</span>: 6 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 7, <span class="string">"name"</span>: <span class="string">"李四7"</span>, <span class="string">"age"</span>: 7 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 8, <span class="string">"name"</span>: <span class="string">"李四8"</span>, <span class="string">"age"</span>: 8 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 9, <span class="string">"name"</span>: <span class="string">"李四9"</span>, <span class="string">"age"</span>: 9 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 10, <span class="string">"name"</span>: <span class="string">"李四10"</span>, <span class="string">"age"</span>: 10 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 11, <span class="string">"name"</span>: <span class="string">"李四11"</span>, <span class="string">"age"</span>: 11 &#125;,</div><div class="line">    &#123; <span class="string">"id"</span>: 12, <span class="string">"name"</span>: <span class="string">"李四12"</span>, <span class="string">"age"</span>: 12 &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>地址改为：<code>http://localhost:3000/userinfo?_page=2</code>,结果如下：<br><img src="/images/mock/mock3.png" alt="3"></p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>关键字：<code>_sort,_order</code><br>地址改为：<code>http://localhost:3000/userinfo?_sort=age&amp;_order=DESC</code>,结果如下：<br><img src="/images/mock/mock4.png" alt="4"><br><code>_sort</code>后面加上你要分类的键名，<code>_order</code>是你要排序的方法。<code>DESC</code>（倒序）或者<code>ASC</code>（顺序）</p>
<h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><p>关键字：<code>_start</code> 和 <code>_end</code> 或 <code>_limit</code><br>这几个参数，类似于js里面的slice函数。slice(_start,_end),从数据里面取出数据。数据不包括<code>_end</code>,<br><code>_limit</code>可以和<code>_start</code>配合，表示从<code>_start</code>位置开始<code>_limit</code>条数据被取出来。<br>地址改为：<code>http://localhost:3000/userinfo?_start=10&amp;_limit=10</code>,结果如下：<br><img src="/images/mock/mock5.png" alt="5"></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul>
<li>_gte：大于或等于</li>
<li>_lte：小于或等于</li>
<li>_ne：不等于</li>
<li>[key]_like：模糊搜索<br>例如<code>http://localhost:3000/userinfo?name_like=李四</code>，结果如下：<br><img src="/images/mock/mock6.png" alt="6"></li>
</ul>
<h2 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h2><p>关键字：<code>q</code>在数据中全文搜索传入的参数<br>例如<code>http://localhost:3000/userinfo?q=1</code>，结果如下：<br><img src="/images/mock/mock7.png" alt="7"></p>
<h2 id="字段扩展"><a href="#字段扩展" class="headerlink" title="字段扩展"></a>字段扩展</h2><ul>
<li><code>_embed</code> 扩展子数据字段</li>
<li><code>_expand</code> 扩展父数据字段<br>例如<code>http://localhost:3000/userinfo/1?_embed=comments</code>，结果如下：<br><img src="/images/mock/mock8.png" alt="8"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是mock数据&quot;&gt;&lt;a href=&quot;#什么是mock数据&quot; class=&quot;headerlink&quot; title=&quot;什么是mock数据&quot;&gt;&lt;/a&gt;什么是mock数据&lt;/h2&gt;&lt;p&gt;作为一名前端开发工程师，我们经常会遇到这样的问题，端已经页面写好了，后端的接口还不能给。有时为了让页面‘正常显示’，前端开发人员就会造一堆的静态假数据，等接口写好，再调接口，删静态数据。于是就想能不能自己模拟数据。简而言之，mock数据就是根据后端接口字段，生成前端需要的模拟数据以便前端独立开发。&lt;/p&gt;
&lt;h2 id=&quot;Json-Server&quot;&gt;&lt;a href=&quot;#Json-Server&quot; class=&quot;headerlink&quot; title=&quot;Json Server&quot;&gt;&lt;/a&gt;Json Server&lt;/h2&gt;&lt;p&gt;不多说了，直接上硬菜。今天我想介绍的一款基于node服务器运行的一个plugins:&lt;a href=&quot;https://github.com/typicode/json-server&quot;&gt;JSON Server&lt;/a&gt;,官网的介绍也很暴力：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Get a full fake REST API with zero coding in less than 30 seconds (seriously)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;30s内零代码即可得到一个完整的模拟 REST API。是不是看到这个就心动了呢。接下里就让我们来看下怎么让这款插件运行起来。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;在你的代码库里安装依赖&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install  json-server --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h2&gt;&lt;p&gt;创建一个json文件。例如 mock.json&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;userinfo&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: 1, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;18&quot;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: 2, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;李四&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;19&quot;&lt;/span&gt; &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: 3, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;王五&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;120&quot;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ json-server --watch mock.json&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打开浏览器输入地址：&lt;a href=&quot;http://localhost:3000/userinfo/1&quot;&gt;http://localhost:3000/userinfo/1&lt;/a&gt;,你可以看到如下数据：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: 1, &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;张三&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;18&quot;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://localhost:3000/userinfo/1&quot;&gt;http://localhost:3000/userinfo/1&lt;/a&gt; 地址里面的userinfo很好理解，代表的就是json文件里面的userinfo键，1表示的是id为1的数据。&lt;br&gt;需要注意的是json-server里面的id是不可变的。用来标识每一条数据，这就好比该json文件时一个数据库，根属性名对应一张张的表，id是表里面的primary key。因此，如果如果你用put方法推入一条带有id的数据，是会被忽略的。&lt;br&gt;另外，需要注意的是，使用post和put方法，需要做一个特殊的处理，后面会讲到。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
      <category term="mock" scheme="http://yoursite.com/categories/javascript/mock/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="mock" scheme="http://yoursite.com/tags/mock/"/>
    
  </entry>
  
  <entry>
    <title>一名前端开发者的小小感悟</title>
    <link href="http://yoursite.com/2017/04/25/wu/"/>
    <id>http://yoursite.com/2017/04/25/wu/</id>
    <published>2017-04-24T16:15:42.000Z</published>
    <updated>2017-04-24T17:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一名前端开发者的小小感悟"><a href="#一名前端开发者的小小感悟" class="headerlink" title="一名前端开发者的小小感悟"></a>一名前端开发者的小小感悟</h3><p>写代码写到现在，有点困了，就来这里写点东西，想想自己来公司也一年了，还记得去年的时候，公司还在用着angular框架，到今年已经是angualr、react、vue三驾马车齐奔腾了，让人有点应接不暇的赶脚。但当看到自己写出来的效果的时候，又觉得心里非常的开心。</p>
<p>现在前端技术的正处在一个高速发展、百花齐放的时期。近两年 angular1 -&gt; angular4框架、 react(redux flux)框架 vue(vuex)框架 es6、webpack、Postcss后处理 flex布局等等。。。让人应接不暇，自己有时侯也感到疲倦烦躁。但是，每当看到它们带来的生产力的飞跃，让你一个人快速搞定前后端的全部开发时，就觉得这终究还是一条正确的道路。</p>
<p>在这信息肆虐的时代，只有不停地向前，才能不被抛弃，才有能力竞争！</p>
<p><div style="text-align:center"><strong>fighting！！！</strong></div><br><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1493054349&amp;di=808ed2e94140656e69e56832398671d2&amp;src=http://wanzao2.b0.upaiyun.com/system/pictures/32629324/original/1454209029_500x500.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一名前端开发者的小小感悟&quot;&gt;&lt;a href=&quot;#一名前端开发者的小小感悟&quot; class=&quot;headerlink&quot; title=&quot;一名前端开发者的小小感悟&quot;&gt;&lt;/a&gt;一名前端开发者的小小感悟&lt;/h3&gt;&lt;p&gt;写代码写到现在，有点困了，就来这里写点东西，想想自己来公司也
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法的基本用法</title>
    <link href="http://yoursite.com/2016/07/25/markdown/"/>
    <id>http://yoursite.com/2016/07/25/markdown/</id>
    <published>2016-07-24T16:22:08.000Z</published>
    <updated>2017-04-24T17:13:52.097Z</updated>
    
    <content type="html"><![CDATA[<p>记得刚用git代码管理工具那会，还不知道每个仓库里面的readme.md是怎么书写的。问了下度娘，才发现居然还有markdown这个语法，今天就来简单的说下，如何快速的使用它。</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>markdown段落 Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p>
<blockquote>
<p>This is an H1<br><span>=============</span></p>
<p>This is an H2<br><span>————-</span></p>
</blockquote>
<p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p>
<blockquote>
<p><span>#</span> 这是 H1<br><span>##</span> 这是 H2<br><span>######</span> 这是 H6</p>
</blockquote>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>写一个段落的文本，要与文本的上下文都隔开至少一行。</p>
<blockquote>
<p>这是一个段落</p>
</blockquote>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。在每行的最前面加上<code>&gt;</code>：</p>
<blockquote>
<p><span>&gt;</span> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</p>
</blockquote>
<h2 id="代码区段"><a href="#代码区段" class="headerlink" title="代码区段"></a>代码区段</h2><p>当要写一段代码的时候，也很简单，只要在你的代码前面使用制表符，例：</p>
<pre><code>hello world!
</code></pre><h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>如果你只是想在文本中间插入一段代码的话，用反引号 ` 将你的代码括起来就行了，效果如下 :</p>
<blockquote>
<p>这是一个<code>我是句子里面的代码</code>句子</p>
</blockquote>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>你可以使用 <code>* + -</code> 这三种符号来表示你的无序列表</p>
<blockquote>
<p><span>*</span>   Red<br><span>*</span>   Green<br><span>*</span>   Blue</p>
</blockquote>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>有序列表则使用数字接着一个英文句点：</p>
<blockquote>
<p><span>1.</span>  &nbsp;             Bird<br><span>2.</span>   &nbsp;            McHale<br><span>3.</span>&nbsp; Parish</p>
</blockquote>
<h2 id="强调和斜体"><a href="#强调和斜体" class="headerlink" title="强调和斜体"></a>强调和斜体</h2><p>Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或_ 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<blockquote>
<p><span>*single asterisks*</span><br><span>_single underscores_</span><br><span>**double asterisks**</span><br><span>__double underscores__</span></p>
</blockquote>
<h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可</p>
<blockquote>
<p>[链接名称](链接地址 “链接title”)</p>
</blockquote>
<p>记住，链接一定要用双引号括起来，而且要与链接地址留一个空格，可以省略。</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>行内式的图片语法：</p>
<blockquote>
<p>![图片替代文字](图片地址 “title”)</p>
</blockquote>
<p>到这markdown的基本语法就讲完了，希望能对您有所帮助！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记得刚用git代码管理工具那会，还不知道每个仓库里面的readme.md是怎么书写的。问了下度娘，才发现居然还有markdown这个语法，今天就来简单的说下，如何快速的使用它。&lt;/p&gt;
&lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://yoursite.com/2016/04/23/sui/"/>
    <id>http://yoursite.com/2016/04/23/sui/</id>
    <published>2016-04-23T15:04:58.000Z</published>
    <updated>2017-04-24T16:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要搭建一个自己的博客"><a href="#为什么要搭建一个自己的博客" class="headerlink" title="为什么要搭建一个自己的博客"></a>为什么要搭建一个自己的博客</h3><p>借用Redux 的创造者 Dan Abramov的一句话：</p>
<blockquote>
<p><strong>“如果你不知道是否需要 Redux，那就是不需要它。”</strong></p>
</blockquote>
<p>是的，我开通个人博客的原因就像那句话一样，因为在自己不断地学习过程中，从其他技术大牛的博客网站学到了很多东西和技能，在这样一个信息爆炸的时代，学习和分享才是最正确的道路。虽然本人在技术方面还不能与大神媲美，但还是希望在从他人那里获取知识的同时，也能够把自己学习的一点心得与大家分享，并在这个平台多和大家交流沟通。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么要搭建一个自己的博客&quot;&gt;&lt;a href=&quot;#为什么要搭建一个自己的博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要搭建一个自己的博客&quot;&gt;&lt;/a&gt;为什么要搭建一个自己的博客&lt;/h3&gt;&lt;p&gt;借用Redux 的创造者 Dan Abramov的一
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
</feed>
