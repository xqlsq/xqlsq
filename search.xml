<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[前端mock数据（一）]]></title>
      <url>%2F2017%2F04%2F29%2Fmock%2F</url>
      <content type="text"><![CDATA[什么是mock数据作为一名前端开发工程师，我们经常会遇到这样的问题，端已经页面写好了，后端的接口还不能给。有时为了让页面‘正常显示’，前端开发人员就会造一堆的静态假数据，等接口写好，再调接口，删静态数据。于是就想能不能自己模拟数据。简而言之，mock数据就是根据后端接口字段，生成前端需要的模拟数据以便前端独立开发。 Json Server不多说了，直接上硬菜。今天我想介绍的一款基于node服务器运行的一个plugins:JSON Server,官网的介绍也很暴力： Get a full fake REST API with zero coding in less than 30 seconds (seriously) 30s内零代码即可得到一个完整的模拟 REST API。是不是看到这个就心动了呢。接下里就让我们来看下怎么让这款插件运行起来。 安装在你的代码库里安装依赖1$ npm install json-server --save 创建创建一个json文件。例如 mock.json1234567&#123; "userinfo": [ &#123; "id": 1, "name": "张三", "age": "18" &#125;, &#123; "id": 2, "name": "李四", "age": "19" &#125;, &#123; "id": 3, "name": "王五", "age": "120" &#125; ]&#125; 运行1$ json-server --watch mock.json 打开浏览器输入地址：http://localhost:3000/userinfo/1,你可以看到如下数据：1&#123; "id": 1, "name": "张三", "age": "18" &#125; http://localhost:3000/userinfo/1 地址里面的userinfo很好理解，代表的就是json文件里面的userinfo键，1表示的是id为1的数据。需要注意的是json-server里面的id是不可变的。用来标识每一条数据，这就好比该json文件时一个数据库，根属性名对应一张张的表，id是表里面的primary key。因此，如果如果你用put方法推入一条带有id的数据，是会被忽略的。另外，需要注意的是，使用post和put方法，需要做一个特殊的处理，后面会讲到。 使用使用json-server作为后端接口，同样，先起服务：json-server --watch mock.json。在你的代码中发起ajax请求，例如：12345fetch('http://localhost:3000/userinfo').then(function(res)&#123; return res.json()&#125;).then(function(res)&#123; console.log(res) //拿到后端的数据，在这里书写你的逻辑&#125;) 你可以看到如下效果：是不是感觉和后端接口几乎一样。相信看到这里你已经心动了，接下来就让我们一起学习如何在接口处加上参数。 参数就跟我们平时使用参数一样，你可以通过类似于http://localhost:3000/userinfo?id=2这种get方式完成参数请求。得到如下结果同样你也可以用name=张三 age=18来筛选数据，显然这些和我们平时用后端接口没差别。与此同时，jsson-server也为我们提供了一些自带的关键字参数 1.分页关键字：_page在这里我们在加几条数据12345678910111213141516&#123; "userinfo": [ &#123; "id": 1, "name": "李四1", "age": 1 &#125;, &#123; "id": 2, "name": "李四2", "age": 2 &#125;, &#123; "id": 3, "name": "李四3", "age": 3 &#125;, &#123; "id": 4, "name": "李四4", "age": 4 &#125;, &#123; "id": 5, "name": "李四5", "age": 5 &#125;, &#123; "id": 6, "name": "李四6", "age": 6 &#125;, &#123; "id": 7, "name": "李四7", "age": 7 &#125;, &#123; "id": 8, "name": "李四8", "age": 8 &#125;, &#123; "id": 9, "name": "李四9", "age": 9 &#125;, &#123; "id": 10, "name": "李四10", "age": 10 &#125;, &#123; "id": 11, "name": "李四11", "age": 11 &#125;, &#123; "id": 12, "name": "李四12", "age": 12 &#125; ]&#125; 地址改为：http://localhost:3000/userinfo?_page=2,结果如下： 排序关键字：_sort,_order地址改为：http://localhost:3000/userinfo?_sort=age&amp;_order=DESC,结果如下：_sort后面加上你要分类的键名，_order是你要排序的方法。DESC（倒序）或者ASC（顺序） 切分关键字：_start 和 _end 或 _limit这几个参数，类似于js里面的slice函数。slice(_start,_end),从数据里面取出数据。数据不包括_end,_limit可以和_start配合，表示从_start位置开始_limit条数据被取出来。地址改为：http://localhost:3000/userinfo?_start=10&amp;_limit=10,结果如下： 操作 _gte：大于或等于 _lte：小于或等于 _ne：不等于 [key]_like：模糊搜索例如http://localhost:3000/userinfo?name_like=李四，结果如下： 全文搜索关键字：q在数据中全文搜索传入的参数例如http://localhost:3000/userinfo?q=1，结果如下： 字段扩展 _embed 扩展子数据字段 _expand 扩展父数据字段例如http://localhost:3000/userinfo/1?_embed=comments，结果如下：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[一名前端开发者的小小感悟]]></title>
      <url>%2F2017%2F04%2F25%2Fwu%2F</url>
      <content type="text"><![CDATA[一名前端开发者的小小感悟写代码写到现在，有点困了，就来这里写点东西，想想自己来公司也一年了，还记得去年的时候，公司还在用着angular框架，到今年已经是angualr、react、vue三驾马车齐奔腾了，让人有点应接不暇的赶脚。但当看到自己写出来的效果的时候，又觉得心里非常的开心。 现在前端技术的正处在一个高速发展、百花齐放的时期。近两年 angular1 -&gt; angular4框架、 react(redux flux)框架 vue(vuex)框架 es6、webpack、Postcss后处理 flex布局等等。。。让人应接不暇，自己有时侯也感到疲倦烦躁。但是，每当看到它们带来的生产力的飞跃，让你一个人快速搞定前后端的全部开发时，就觉得这终究还是一条正确的道路。 在这信息肆虐的时代，只有不停地向前，才能不被抛弃，才有能力竞争！ fighting！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[markdown语法的基本用法]]></title>
      <url>%2F2016%2F07%2F25%2Fmarkdown%2F</url>
      <content type="text"><![CDATA[记得刚用git代码管理工具那会，还不知道每个仓库里面的readme.md是怎么书写的。问了下度娘，才发现居然还有markdown这个语法，今天就来简单的说下，如何快速的使用它。 标题markdown段落 Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1============= This is an H2————- 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 这是 H1## 这是 H2###### 这是 H6 段落写一个段落的文本，要与文本的上下文都隔开至少一行。 这是一个段落 区块引用Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。在每行的最前面加上&gt;： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, 代码区段当要写一段代码的时候，也很简单，只要在你的代码前面使用制表符，例： hello world! 行内代码如果你只是想在文本中间插入一段代码的话，用反引号 ` 将你的代码括起来就行了，效果如下 : 这是一个我是句子里面的代码句子 无序列表你可以使用 * + - 这三种符号来表示你的无序列表 * Red* Green* Blue 有序列表有序列表则使用数字接着一个英文句点： 1. &nbsp; Bird2. &nbsp; McHale3.&nbsp; Parish 强调和斜体Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或_ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： *single asterisks*_single underscores_**double asterisks**__double underscores__ 链接与图片链接只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可 [链接名称](链接地址 “链接title”) 记住，链接一定要用双引号括起来，而且要与链接地址留一个空格，可以省略。 图片行内式的图片语法： ![图片替代文字](图片地址 “title”) 到这markdown的基本语法就讲完了，希望能对您有所帮助！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[随笔]]></title>
      <url>%2F2016%2F04%2F23%2Fsui%2F</url>
      <content type="text"><![CDATA[为什么要搭建一个自己的博客借用Redux 的创造者 Dan Abramov的一句话： “如果你不知道是否需要 Redux，那就是不需要它。” 是的，我开通个人博客的原因就像那句话一样，因为在自己不断地学习过程中，从其他技术大牛的博客网站学到了很多东西和技能，在这样一个信息爆炸的时代，学习和分享才是最正确的道路。虽然本人在技术方面还不能与大神媲美，但还是希望在从他人那里获取知识的同时，也能够把自己学习的一点心得与大家分享，并在这个平台多和大家交流沟通。]]></content>
    </entry>

    
  
  
</search>
